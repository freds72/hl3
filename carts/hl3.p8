pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- half-life 3 tech demo
-- @freds72

local _tok={
  ['true']=true,
  ['false']=false}
function nop() return true end
local _g={
  cls=cls,
  clip=clip,
  map=map,
  print=print,
  line=line,
  spr=spr,
  sspr=sspr,
  pset=pset,
  rect=rect,
  rectfill=rectfill,
  sfx=sfx}

-- json parser
-- from: https://gist.github.com/tylerneylon/59f4bcf316be525b30ab
local table_delims={['{']="}",['[']="]"}
local function match(s,tokens)
  for i=1,#tokens do
    if(s==sub(tokens,i,i)) return true
  end
  return false
end
local function skip_delim(str, pos, delim, err_if_missing)
if sub(str,pos,pos)!=delim then
  --if(err_if_missing) assert'delimiter missing'
  return pos,false
end
return pos+1,true
end

local function parse_str_val(str, pos, val)
  val=val or ''
  --[[
  if pos>#str then
    assert'end of input found while parsing string.'
  end
  ]]
  local c=sub(str,pos,pos)
  -- lookup global refs
if(c=='"') return _g[val] or val,pos+1
  return parse_str_val(str,pos+1,val..c)
end
local function parse_num_val(str,pos,val)
  val=val or ''
  --[[
  if pos>#str then
    assert'end of input found while parsing string.'
  end
  ]]
  local c=sub(str,pos,pos)
  -- support base 10, 16 and 2 numbers
  if(not match(c,"-xb0123456789abcdef.")) return tonum(val),pos
  return parse_num_val(str,pos+1,val..c)
end
-- public values and functions.

function json_parse(str, pos, end_delim)
  pos=pos or 1
  -- if(pos>#str) assert'reached unexpected end of input.'
  local first=sub(str,pos,pos)
  if match(first,"{[") then
    local obj,key,delim_found={},true,true
    pos+=1
    while true do
      key,pos=json_parse(str, pos, table_delims[first])
      if(key==nil) return obj,pos
      -- if not delim_found then assert'comma missing between table items.' end
      if first=="{" then
        pos=skip_delim(str,pos,':',true)  -- true -> error if missing.
        obj[key],pos=json_parse(str,pos)
      else
        add(obj,key)
      end
      pos,delim_found=skip_delim(str, pos, ',')
  end
  elseif first=='"' then
    -- parse a string (or a reference to a global object)
    return parse_str_val(str,pos+1)
  elseif match(first,"-0123456789") then
    -- parse a number.
    return parse_num_val(str, pos)
  elseif first==end_delim then  -- end of an object or array.
    return nil,pos+1
  else  -- parse true, false
    for lit_str,lit_val in pairs(_tok) do
      local lit_end=pos+#lit_str-1
      if sub(str,pos,lit_end)==lit_str then return lit_val,lit_end+1 end
    end
    -- assert'invalid json token'
  end
end

local db=json_parse'[{"model":"cactus","pos":[-2.723649501800537,4.4406931465346133e-08,8.234867095947266],"rotation":[0.0,-1.8721495866775513,-0.0]},{"model":"bone","pos":[6.569388389587402,-0.07269430160522461,26.005447387695312],"rotation":[0.0,1.9477826356887817,-0.0]},{"model":"whale","pos":[0.7409498691558838,0.6487574577331543,21.316499710083008],"rotation":[0.0,-4.508837699890137,-0.0]},{"model":"whale","pos":[1.2408751249313354,0.8204874396324158,19.370227813720703],"rotation":[0.0,-10.861827850341797,-0.0]},{"model":"whale","pos":[1.2752212285995483,1.0027644634246826,17.207555770874023],"rotation":[0.0,-4.790738105773926,-0.0]},{"model":"whale","pos":[-3.876676559448242,0.6487576365470886,21.392820358276367],"rotation":[0.0,-1.8434661626815796,-0.0]},{"model":"whale","pos":[-4.254482269287109,0.8204876184463501,19.293899536132812],"rotation":[0.0,-1.5306059122085571,-0.0]},{"model":"whale","pos":[-4.2201361656188965,1.00276517868042,17.264801025390625],"rotation":[0.0,-1.4553272724151611,0.0]},{"model":"cactus","pos":[7.625940799713135,4.4406931465346133e-08,13.478355407714844],"rotation":[0.0,-1.2151635885238647,-0.0]},{"model":"rock","pos":[11.058204650878906,2.449309825897217,15.501456260681152],"rotation":[2.7128360271453857,0.5550825595855713,0.2874079942703247]},{"model":"tree","pos":[-6.3154826164245605,1.7125838667197968e-06,-14.152036666870117],"rotation":[0.0,-1.0184152126312256,-0.0]},{"model":"rock","pos":[9.937151908874512,0.06417205929756165,10.687064170837402],"rotation":[0.0,1.0152875185012817,-0.0]},{"model":"rock","pos":[-4.438706398010254,0.06417378783226013,-7.612480163574219],"rotation":[0.0,-0.3784044682979584,-0.0]},{"model":"tree","pos":[-2.2678213119506836,-6.511196914971151e-08,-18.253780364990234],"rotation":[0.0,-2.9394259452819824,-0.0]},{"model":"bone","pos":[5.2328290939331055,-0.07269417494535446,-11.526089668273926],"rotation":[0.0,1.0429048538208008,-0.0]},{"model":"rock","pos":[6.133822441101074,0.02270624041557312,2.5751960277557373],"rotation":[0.013591023162007332,-3.8918581008911133,-0.014582711271941662]},{"model":"rock","pos":[4.784369468688965,2.8420228958129883,2.4790101051330566],"rotation":[-0.1527964472770691,-9.822582244873047,0.4297603666782379]},{"model":"rock","pos":[2.0009350776672363,3.9067912101745605,3.5565834045410156],"rotation":[-0.027236277237534523,-7.753747463226318,0.12621630728244781]},{"model":"rock","pos":[-1.08145272731781,2.9945149421691895,3.5289387702941895],"rotation":[-0.16672518849372864,-6.673370838165283,0.4728836715221405]},{"model":"rock","pos":[-2.65720272064209,1.8749033212661743,3.293958902359009],"rotation":[0.20294751226902008,-3.9135289192199707,-0.21300405263900757]},{"model":"rock","pos":[-2.823071002960205,0.06417344510555267,3.5980513095855713],"rotation":[0.0,-1.4253894090652466,-0.0]},{"model":"cactus","pos":[-2.331648349761963,4.4406931465346133e-08,-2.8428597450256348],"rotation":[0.0,0.4665260910987854,-0.0]}]'
-- dither pattern 4x4 kernel
local dither_pat=json_parse'[0xffff,0x7fff,0x7fdf,0x5fdf,0x5f5f,0x5b5f,0x5b5e,0x5a5e,0x5a5a,0x1a5a,0x1a4a,0x0a4a,0x0a0a,0x020a,0x0208,0x0000]'
-- clipplanes
local clipplanes=json_parse'[[0.707,0,-0.707,0.1767],[-0.707,0,-0.707,0.1767],[0,0.707,-0.707,0.1767],[0,-0.707,-0.707,0.1767],[0,0,-1,-0.25]]'

--3d
-- world axis
local v_fwd,v_right,v_up={0,0,1},{1,0,0},{0,1,0}

-- models & actors
local all_models,actors,cam={},{}
local sun_dir={-0.4811,0.7523,-0.45}

function _init()
 -- mouse support
	poke(0x5f2d,1)

 -- 3d
 cam=make_cam(64,64,64)

 -- reset actors & engine
 actors={}
 for _,o in pairs(db) do
	add(actors,make_actor(o.model,o.pos,make_m_from_euler(munpack(o.rotation))))
 end
 --[[
 for i=1,40 do
	 add(actors,make_actor("cube",{rnd(10)-5,0,rnd(10)-5},rnd(360)))		
	end
	]]
 --add(actors,make_actor("cube",{rnd(10)-5,0,rnd(10)-5},rnd(360)))		
 --[[
 for i=1,3 do
 	add(actors,make_actor("cactus",{rnd(10)-5,-1,rnd(10)-5},rnd(360)))		
	end
	add(actors,make_actor("bone",{rnd(10)-5,-1,rnd(10)-5},rnd(360)))		
	add(actors,make_actor("tree",{rnd(10)-5,-1,rnd(10)-5},rnd(360)))		
	--add(actors,make_actor("palmtree",{rnd(10)-5,-1,rnd(10)-5},rnd(360)))		
	add(actors,make_actor("rock",{rnd(10)-5,-1,rnd(10)-5},rnd(360)))		
	]]
end

-- execute the given draw commands from a table
function exec(cmds)
  -- call native pico function from list of instructions
  for i=1,#cmds do
    local drawcmd=cmds[i]
    drawcmd.fn(munpack(drawcmd.args))
  end
end

local plyr={
  pos={0,1.6,0},
  hdg=0,
  pitch=0
}
local mousex,mousey
function _update()
	local mx,my=stat(32),stat(33)

  local dx,dz=0,0
  if(btn(0)) dx=-1
  if(btn(1)) dx=1
  if(btn(2)) dz=1
  if(btn(3)) dz=-1

  if mousex then
   plyr.hdg+=(mx-mousex)/128
  end
  if mousey then
   plyr.pitch+=(my-mousey)/128
  end
  
  local m=make_m_from_euler(0,plyr.hdg,0)
  v_add(plyr.pos,m_right(m),0.1*dx)
  v_add(plyr.pos,m_fwd(m),0.1*dz)

  cam:track(plyr.pos,make_m_from_euler(plyr.pitch,plyr.hdg,0,'yxz'))

  mousex,mousey=mx,my
end

function _draw()
   cls(4)
	  draw_ground()
	  zbuf_draw()

   -- perf monitor!
   --
   local cpu=(flr(1000*stat(1))/10).."%"
   ?"∧"..cpu,2,3,2
   ?"∧"..cpu,2,2,7
   
end

-->8
-- 3d engine @freds72

-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 local n = #data 
 if(n<2) return
 
 -- form a max heap
 for i = flr(n / 2) + 1, 1, -1 do
  -- m is the index of the max child
  local parent, value, m = i, data[i], i + i
  local key = value.key 
  
  while m <= n do
   -- find the max child
   if ((m < n) and (data[m + 1].key > data[m].key)) m += 1
   local mval = data[m]
   if (key > mval.key) break
   data[parent] = mval
   parent = m
   m += m
  end
  data[parent] = value
 end 

 -- read out the values,
 -- restoring the heap property
 -- after each step
 for i = n, 2, -1 do
  -- swap root with last
  local value = data[i]
  data[i], data[1] = data[1], value

  -- restore the heap
  local parent, terminate, m = 1, i - 1, 2
  local key = value.key 
  
  while m <= terminate do
   local mval = data[m]
   local mkey = mval.key
   if (m < terminate) and (data[m + 1].key > mkey) then
    m += 1
    mval = data[m]
    mkey = mval.key
   end
   if (key > mkey) break
   data[parent] = mval
   parent = m
   m += m
  end  
  
  data[parent] = value
 end
end

-- zbuffer (kind of)
local znear_plane={0,0,-1,-0.25}
local k_center=1
local k_right=2
local k_left=4
function zbuf_draw(zfar)
	local objs={}

	for _,d in pairs(actors) do
		collect_drawables(d.model,d.m,d.pos,zfar,objs)
	end

	-- z-sorting
	sort(objs)

 -- actual draw
	for i=1,#objs do
		local d=objs[i]
   if d.kind==3 then
    fillp(d.fp)
		 	project_poly(d.v,d.c)
   end
 end
 fillp()
 
 print(#objs,110,3,1)
 print(#objs,110,2,7) 
end

function lerp(a,b,t)
	return a*(1-t)+b*t
end

function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	v[1],v[2],v[3]=m[1]*x+m[5]*y+m[9]*z+m[13],m[2]*x+m[6]*y+m[10]*z+m[14],m[3]*x+m[7]*y+m[11]*z+m[15]
end

function make_m_from_euler(x,y,z,order)
		local a,b = cos(x),-sin(x)
		local c,d = cos(y),-sin(y)
		local e,f = cos(z),-sin(z)
  
  if order=='yxz' then
   local ce,cf,de,df=c*e,c*f,d*e,d*f
 	 return {
 	  ce+df*b,a*f,cf*b-de,0,
 	  de*b-cf,a*e,df+ce*b,0,
 	  a*d,-b,a*c,0,
 	  0,0,0,1}
		end
		
	 -- xyz order
	 -- blender default
  local ae,af,be,bf=a*e,a*f,b*e,b*f

		return {
			c*e,af + be * d,bf - ae * d,0,
			- c * f, ae - bf * d,be + af * d,0,
   d,- b * c, a * c,0,
   0,0,0,1
		}	 
end

-- only invert 3x3 part
function m_inv(m)
	m[2],m[5]=m[5],m[2]
	m[3],m[9]=m[9],m[3]
	m[7],m[10]=m[10],m[7]
end
function m_set_pos(m,v)
	m[13],m[14],m[15]=v[1],v[2],v[3]
end
-- returns up vector from matrix
function m_up(m)
	return {m[5],m[6],m[7]}
end
-- returns right vector from matrix
function m_right(m)
	return {m[1],m[2],m[3]}
end
-- returns foward vector from matrix
function m_fwd(m)
	return {m[9],m[10],m[11]}
end

function collect_drawables(model,m,pos,zfar,out)
 -- vertex cache
 local p={}

 -- cam pos in object space
 local cam_pos=make_v(pos,cam.pos)
 local x,y,z=cam_pos[1],cam_pos[2],cam_pos[3]
	cam_pos={m[1]*x+m[2]*y+m[3]*z,m[5]*x+m[6]*y+m[7]*z,m[9]*x+m[10]*y+m[11]*z}

 -- sun dir in object space
 x,y,z=sun_dir[1],sun_dir[2],sun_dir[3]
	local light={m[1]*x+m[2]*y+m[3]*z,m[5]*x+m[6]*y+m[7]*z,m[9]*x+m[10]*y+m[11]*z}
 
 
 -- select lod
 local safe_pos=v_clone(cam_pos)
 -- todo: using nm?
 v_scale(safe_pos,1/4)
 local d=v_dot(safe_pos,safe_pos)
 
 -- lod selection
 local lodid=0
 for i=1,#model.lod_dist do
  --printh(d..">"..model.lod_dist[i])
 	if(d>model.lod_dist[i]) lodid+=1
 end
  
 -- not visible?
 --if(lodid>=#model.lods) return 
 lodid=min(lodid,#model.lods-1)
 model=model.lods[lodid+1]
 
  -- faces
	for i=1,#model.f do
  local f,n=model.f[i],model.n[i]
  -- front facing?
  if v_dot(n,cam_pos)>model.cp[i] then
   -- face vertices (for clipping)
   local z,vertices,outcode,vizclip=0,{},0
   -- project vertices
   for k=1,#f.vi do
				local ak=f.vi[k]
				local a=p[ak]
				if not a then
    	a=v_clone(model.v[ak])
    	-- relative to world
    	m_x_v(m,a)
    	-- world to cam
    	v_add(a,cam.pos,-1)
  			m_x_v(cam.m,a)
	   	p[ak]=a
  		 -- outcode
  		 -- 0: vizible
  		 local outcode=0
  		 local ax,ay,az=a[1],a[2],a[3]
  		 if az>0.25 then
  		 	if ax>az then outcode=k_right
  		 	elseif -ax>az then outcode=k_left
  		 	else outcode=k_center end
  		 end
  		 a.outcode=outcode
  		end
			 local az=a[3]
    z+=az
		  outcode=bor(outcode,a.outcode)
		  vertices[#vertices+1]=a
   end
   --
   if (outcode==6 or band(outcode,1)==1) and
      f.c!=15 then -- collision hull?
    vertices=z_poly_clip(0.25,vertices)
	  	if #vertices>2 then
   		local c=max(5*v_dot(n,light))
   		-- get floating part
   		local cf=(#dither_pat-1)*(1-c%1)
   		c=bor(shl(sget(min(c+1,5),f.c),4),sget(c,f.c))

	  	 add(out,{key=64*#f.vi/z,v=vertices,c=c,fp=dither_pat[flr(cf)+1],kind=3})
	  	end
 	 end
	  --print(outcode,2,12,13)
	  --return
  end
 end
end

-- sutherland-hodgman clipping
-- n.p is pre-multiplied in n[4]
function plane_poly_clip(n,v)
	local dist,allin={},0
	for i,a in pairs(v) do
		local d=n[4]-(a[1]*n[1]+a[2]*n[2]+a[3]*n[3])
		if(d>0) allin+=1
	 dist[i]=d
	end
 -- early exit
	if(allin==#v) return v
 if(allin==0) return {}

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	if(v0[4]) r[4]=lerp(v0[4],v1[4],t)
 	if(v0[5]) r[5]=lerp(v0[5],v1[5],t)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end
function z_poly_clip(znear,v)
	local dist,allin={},0
	for i,a in pairs(v) do
		local d=-znear+a[3]
		if(d>0) allin+=1
	 dist[i]=d
	end
 -- early exit
	if(allin==#v) return v
 if(allin==0) return {}

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	if(v0[4]) r[4]=lerp(v0[4],v1[4],t)
 	if(v0[5]) r[5]=lerp(v0[5],v1[5],t)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end

function make_actor(model,p,m)
  angle=angle and angle/360 or 0
	-- instance
	local a={
		pos=v_clone(p),
    model=all_models[model],
		m=m
  }

	-- init position
  m_set_pos(a.m,p)
	return a
end

function make_cam(x0,y0,focal)
	local c={
		pos={0,0,0},
		track=function(self,pos,m)
    self.pos=v_clone(pos)

		-- inverse view matrix
    self.m=m
    m_inv(self.m)
	 end,
		-- project cam-space points into 2d
    project2d=function(self,v)
  	  -- view to screen
  	  local w=focal/v[3]
  	  return x0+v[1]*w,y0-v[2]*w,w,v[4] and v[4]*w,v[5] and v[5]*w
		end,
		-- project cam-space points into 2d
    -- array version
    project2da=function(self,v)
  	  -- view to screen
  	  local w=focal/v[3]
  	  return {x0+v[1]*w,y0-v[2]*w,w,v[4]*w,v[5]*w}
		end
	}
	return c
end

local sky_gradient={0,0xc7,0xa5a5,360,0xc6,0xa5a5,1440,12,0}
function draw_ground()
	-- draw horizon
	local zfar=-128
	local farplane={
			{-zfar,zfar,zfar},
			{-zfar,-zfar,zfar},
			{zfar,-zfar,zfar},
			{zfar,zfar,zfar}}
	-- cam up in world space
	local n=m_up(cam.m)

 local y0=cam.pos[2]

 -- start alt.,color,pattern
	for i=1,#sky_gradient,3 do
		-- ground location in cam space
  -- offset by sky layer ceiling
		-- or infinite (h=0) for clear sky
		local p={0,-sky_gradient[i]/120,0}
		if(horiz) p[2]+=y0
		m_x_v(cam.m,p)
		n[4]=v_dot(p,n)
		farplane=plane_poly_clip(n,farplane)
		fillp(sky_gradient[i+2])
  -- display
		project_poly(farplane,sky_gradient[i+1])
	end
 fillp()
 
 -- shadows
 local cloudy=-cam.pos[2]
 -- plane coords + u/v (32x32 texture)
 local cloudplane={
		{32,cloudy,32,64,0},
		{-32,cloudy,32,0,0},
		{-32,cloudy,-32,0,64},
		{32,cloudy,-32,64,64}}
 for _,v in pairs(cloudplane) do
  m_x_v(cam.m,v)
 end
 for i=1,#clipplanes do
	 cloudplane=plane_poly_clip(clipplanes[i],cloudplane)
 end
 color(0x40)
 project_texpoly(cloudplane)

 -- sun
 local sun={-5,5,-5}
 m_x_v(cam.m,sun)
 local x,y,w=cam:project2d(sun)
 if(w>0) fillp(0xa5a5) circfill(x,y,8,0xc7) fillp() circfill(x,y,4,7)
end

function project_poly(p,c)
	if #p>2 then
		local x0,y0=cam:project2d(p[1])
  local x1,y1=cam:project2d(p[2])
		for i=3,#p do
			local x2,y2=cam:project2d(p[i])
			trifill(x0,y0,x1,y1,x2,y2,c)
		  x1,y1=x2,y2
		end
	end
end

-->8
-- trifill
-- by @p01
function p01_trapeze_h(l,r,lt,rt,y0,y1)
  lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
  if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
   for y0=y0,min(y1,128) do
   rectfill(l,y0,r,y0)
   l+=lt
   r+=rt
  end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 for x0=x0,min(x1,128) do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end

function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

-->8
-- unpack data & models
local mem=0x1000

-- unpack a list into an argument list
-- trick from: https://gist.github.com/josefnpat/bfe4aaa5bbb44f572cd0
function munpack(t, from, to)
 local from,to=from or 1,to or #t
 if(from<=to) return t[from], munpack(t, from+1, to)
end

-- w: number of bytes (1 or 2)
function unpack_int(w)
  w=w or 1
	local i=w==1 and peek(mem) or bor(shl(peek(mem),8),peek(mem+1))
	mem+=w
	return i
end
-- unpack a float from 1 byte
function unpack_float(scale)
	local f=shr(unpack_int()-128,5)
	return f*(scale or 1)
end
-- unpack a float from 2 bytes
function unpack_double(scale)
	local f=shr(unpack_int(2)-0x4000,4)
	return f*(scale or 1)
end
-- unpack an array of bytes
function unpack_array(fn)
	for i=1,unpack_int() do
		fn(i)
	end
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	unpack_array(function()
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end)
	return s
end

-->8
-- unpack models
function unpack_models()
	-- for all models
	unpack_array(function()
  local model,name,scale={lods={},lod_dist={}},unpack_string(),1/unpack_int()
  
  unpack_array(function()
  	add(model.lod_dist,unpack_double())
  end)
  
		-- level of details
		unpack_array(function()
   local lod={v={},f={},n={},cp={},groups={}}
   -- vertices
   unpack_array(function()
    add(lod.v,{unpack_double(scale),unpack_double(scale),unpack_double(scale)})
   end)

   -- faces
   unpack_array(function(i)
    local f={ni=i,vi={},c=unpack_int(),gid=unpack_int()}
    -- vertex indices
    unpack_array(function()
     add(f.vi,unpack_int())
    end)
    add(lod.f,f)
    -- collision group
    if(f.gid>0) lod.groups[f.gid]=1+(lod.groups[f.gid] or 0)
   end)

   -- normals
   unpack_array(function()
    add(lod.n,{unpack_float(),unpack_float(),unpack_float()})
   end)

   -- n.p cache
   for i=1,#lod.f do
    local f=lod.f[i]
    local cp=v_dot(lod.n[i],lod.v[f.vi[1]])
    add(lod.cp,cp)
   end
  
   add(model.lods,lod)
  end)
		-- index by name
		all_models[name]=model
	end)
end

-- unpack models
unpack_models()

-->8
-- textured trifill
function project_texpoly(p)
	if #p>2 then
		local p0,p1=cam:project2da(p[1]),cam:project2da(p[2])
		for i=3,#p do
			local p2=cam:project2da(p[i])
			tritex(p0,p1,p2)
			p1=p2
		end
	end
end

-- 32 px
-- local tex_mask=shl(0xfff8,4)
function trapezefill(l,dl,r,dr,start,finish)
	local l,dl={
		l[1],l[3],l[4],l[5],
		r[1],r[3],r[4],r[5]},{
		dl[1],dl[3],dl[4],dl[5],
		dr[1],dr[3],dr[4],dr[5]}
	local dt=1/(finish-start)
	for k,v in pairs(dl) do
		dl[k]=(v-l[k])*dt
	end

	-- cliping
	if start<0 then
		for k,v in pairs(dl) do
			l[k]-=start*v
		end
		start=0
	end

  -- cloud texture location + cam pos
  local cx,cz=-cam.pos[1],cam.pos[3]
	-- rasterization
	for j=start,min(finish,127) do
		local len=l[5]-l[1]
		if len>0 then
  local w0,u0,v0=l[2],l[3],l[4]
   -- render every 4 pixels
			local dw,du,dv=shl(l[6]-w0,2)/len,shl(l[7]-u0,2)/len,shl(l[8]-v0,2)/len
   for i=l[1],l[5],4 do
    local sx,sy=(u0/w0),(v0/w0)
    -- don't repeat texture
    if band(bor(sx-cx,sy-cz),0xff00)==0 then
     -- shift u/v map from cam pos+texture repeat
     local c=sget(8+sx-cx,sy-cz)
     if c!=0 then
      fillp(dither_pat[c+1])
 	    rectfill(i-2,j,i+1,j)
 		  end
 		 end
			u0+=du
			v0+=dv
			w0+=dw
		 end
  end
		for k,v in pairs(dl) do
			l[k]+=v
		end
	end
end
function tritex(v0,v1,v2)
	local x0,x1,x2=v0[1],v1[1],v2[1]
	local y0,y1,y2=v0[2],v1[2],v2[2]
if(y1<y0)v0,v1,x0,x1,y0,y1=v1,v0,x1,x0,y1,y0
if(y2<y0)v0,v2,x0,x2,y0,y2=v2,v0,x2,x0,y2,y0
if(y2<y1)v1,v2,x1,x2,y1,y2=v2,v1,x2,x1,y2,y1

	-- mid point
	local v02,mt={},1/(y2-y0)*(y1-y0)
	for k,v in pairs(v0) do
		v02[k]=v+(v2[k]-v)*mt
	end
	if(x1>v02[1])v1,v02=v02,v1

	-- upper trapeze
	-- x u v
	trapezefill(v0,v1,v0,v02,y0,y1)
	-- lower trapeze
  trapezefill(v1,v2,v02,v2,y1,y2)
  -- reset fillp
  fillp()
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
013ba700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05449a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
056f7700000000000000000000000000000000000000005500000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000055666660000000000000000000000000000000d650000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000055666000000000000000000000000000000002cc20000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000002520000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000550050000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000d7525655000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01d6660000000000000000000000000000006d555cc2000000265500000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000005dc6506d6000005c6dcd0000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000029c65576c500005d666c5000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000d9dc5566c5000ddb666d5000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000007695007670002cd557720000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000275000d720005d2550000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000055cc2000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000055000000029666000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000002dd0000000296d5000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000002dd5000000055755000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000005dd50000525500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000005525255c9dd52000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000056bd9d666666c200000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000526d66666666666600000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000596669dcc66666dd00000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000005d666bd525d66667500000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000002cddc50002d666c2000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000222500002966650000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000005d50056d9c50000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000027d2000052500000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000d550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000005505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000057cd50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000002b66920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000002d66c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005c6c200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000262000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000005565000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000005c50000000057d20000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000057500000500027650000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000005000002550005500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000026d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000dc6500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000006c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7040e002d0011010080010800401f30f04010401f30ff30ff30ff30ff30ff30ff30f040104010401040104010401f30ff30f0401f30ff30f0401040160701040
10203040701040508070607010401050602070104020607030701040307080407010405010408060080608080a080a080808080606080808080a40d0a1910110
200402040820c40470042004b004400490044004500430f37f045004c0f38f046004c0f3ff04700410f3ff04600460048004600470f36f048004600400042004
2004b00420045004b00440041004110460044004b0045004500450043004800440044004900400045004400400049004d0f3df048004d0f37f04800480f35f04
a00470f3dff37e0421f36ff37e04c0f35ff38e04f0f35ff38e04f0f37ff36e04c0f37ff3be04c0f35ff3be04c0f38ff39e0490f38ff3ae0480f35ff39f0470f3
7ff39f04c0f3bff39f0470f3bff3af04b0f37ff39f04000480f3cf04900440f3bf0430f37ff3bf04c0f38f040004b0f37f04000410f37f040004b00450040004
200480f39f04c0f3fff39f0410f3ff040004d00400f3af04500480f3af0470f36f04000460049004000450f34ff38f04600400f39f042004b0f3ef042004b0f3
ef045004b0f3cf04100411f3af044004b0f3bf04400460f3df04800440f3cf04a00400f3bf04400400f37f04d0f3dff38f04d0f37ff38f0480f35ff36f0470f3
df046004b0f37f04700470f3bf047004c0f3bf04700470f37f04610480f35f04710490f38f045104c0f38f045104c0f35f04a104c0f37f048104f0f37f048104
f0f35f049104c0f35f04910421f36fd5700030a2b0a0700030d24050700030133080700030d220927000309010707000302003927000308031407000307010d0
70003070b003700030b0d0c070003090015070004083e223b370003020e070700030315121700040f323f2e37000407262f21370003050519070003081916170
003061a17170004081b1c19170003091a1617000408171e1b1700040a1d1e17170004030609080700030a25303700030d262727000305213f270003042d29270
00303223e270004080407213700030034292700030d3f262700030e2333270003053e203700030436353700030a323b270004062b2c3d37000308342e2700030
f3d3c3700040a3b2429370004021504031700030f3b22370004084b44454700030a4c4947000405464948470004074642404700040a47444b4700030a203b070
0030d27240700030138230700030d2502070003090601070003020700370003080413170003010c0d070003070d0b0700030a0b0c070003090110170003020f0
e0700030314151700030502151700040b12202c1700040d1a191c170004022b1e1f1700040c10212d1700030816171700030a24353700030d2b2627000305282
1370003042b2d270003032c22370003003e242700030d3e3f2700030736333700030e273337000305373e2700030536373700030a3b323700030839342700030
f3e3d3700030f3c3b2700030a4b4c470004004344474700040a494647470003094c48470004064541424700030c4b484000040f00111e0000040b3a393837000
40e01190707000405141809070004001f0205070004052f223c2d5760849580a18a84746b8b9e8d9c898a84979178856f9883828f98848a9298868e919b9f7c9
1807f958879716a7d7b82699a829f978581638a76979280798a938f70676c6d7e9978759a77948f9b767474657b9e816188838b826674979f888560628b7c7f9
68f90878a768f9b8e93886c7b616588796960867e93876a82999c6d71678589848f9f70ae7d7f706b6a779c7f9b768e66668a919f98708488959976816c958e8
68d9d816087838f70a59f786f95887493899180ae77748f9580806a738f9675826990849a7f918a7e66697a919168708b77959c878365678f826a86897e9a8c7
a929e7080ac6a786264877b63889a85826b70806a679280998a96838f9f938a7e98878269888f6b9c75816c7b9f63826978702f37e0421f36ff37e0490f37ff3
9e04c0f37ff39f0470f39ff39f04c0f39f047004c0f39f04700470f39f047104c0f37f04910490f37f04910421f36ff3cf04000411f3cf04900440f3bf0430f3
7ff39f0470f35ff38f04600400f3ef045004b0f38f04d0f3dff39f04c0f37ff38f0470f35ff36f0470f3df04400400041104400490044004500430f37f040004
10f38f04000420048004700470f35f0480046004000420045004b0048004d0f3df047004c0f37f04800470f35f04a00470f3dfa1700040503020407000405030
204070003030102070003030102070003080a09070003080a090700040608090707000406080907070004041312111700040d161c011700030f0c0b070003001
91b070003091c15170004002d1e1f1700040b1a17151700030b15161700030b0c00170004001c061c170003001c19150004061d102b1700040d0e0f0b0500040
f04111c07000401121e1d170004031f1e121700050e0d08171a170003051c161a158f706b7180a88c7168748f98848f987c71658180ab7f70636c88708c9f876
09d8c988d84688d8d9c887a9e6f79909d827791908b90908b68999a81966e6f776a81908f98708c836080746e8791960e0c0e0f102e110200402040820d20400
0400f3cff3ff04f3f3eff3cf0400f3eff3cf04e30400f3cf04000420f3cf04e30430f3ff04e30450042004e3043004400400f3ef042004f30400044004000420
040004000440f3ff0441f3eff34f04030400f32f04030410f3ff04410420f32f04030440f34f04f20450f3ff04710400f36f04f20440f36f04f20410f36f0491
f3eff30f04820400f35f0471f3fff30f04c20440f35f04710420f36f04910440f38f04b10420f38f04a1f3ff04300481042004900483042004c0049304100430
0471f3ff04c00493f3ff04200491f3df042004b1040004900483f3ef04a004d1043004b00463043004c004c1042004c004c1f3ef04b00463f3df04a004d1f3df
048004e10420048004f1f3ef42300040a090b080300040c13101b13000409222a2b23000405030406030004081a101d030005021b1a191113000402202f15230
0040e142c262300050f0718161e0300040c14151d130004071f011913000400222928230006011f0e05141213000401292b23230004080b0c0703000407191a1
81300040201090a0300040d031d161300040829212e13000608070604020a03000401020403030004032b2d2423000407202826230003031c1d130003001a1b1
3000306181d0300040506070c030003072f1023000302252a230003042d2c23000306282e1300040a252d2b2300040f1c2d25230004041c1b1213000407262c2
f1300040e061d151420a1808e8b8b96908860608087716d757d7e9e70a0847e8a93718360a38f71698080a08f7580a287807560908c9268768091846a80966e8
4668f70a28071846471986590889e8d9e7c7f6b98727461708c94819b928295627d9289807a9c608760618082908b9c60899b848265104000400f3bff3ef04e3
f3eff3bf04000400f3bf04e30420f3ff04e30450045004000400042004f3041004100400045004300461040004c004c10400042004c10400048004f1040004d0
04830400049004830400f38f04b10400f3cf04910400f35f04710400f3df04410400f36f04f20400f31f04030400f30f04820400d03000407060805030004030
10204030004040508030300040504020703000401060702030004090a0c0b030004090a0c0b0300040c0a0d0e0300040c0a0d0e0300040f0012111300040f001
2111300050f011514131300050f011514131d09918597608b6b6f789e70a0859288608080608080a08080608080a08080a08080608080a08080640f1d1010110
200402040820f2f37f04000410f39f04f0f3cff3bf040004a0f3af04f00410045004000460045004f00410047004f0f3cf04a00400f39f043004f0f36ff3bf04
00f35ff3df0490f37ff37f0482f3aff3af0482f3cff3ff0482f3cf04200482f3aff3ff0482f37ff3af0482f37ff3cf04d3f32f041004c3f32ff3ef0404f3fef3
bf04310450f3cf04a00480043004f00490043004010450f39f048104a0f38f045104c0041004410480f39f0402f3bff3af0422f3cff3df0442f3bff3df0442f3
8ff3bf0422f38ff39f0402f3aff35f0413f36ff36f0453f37ff35f0443f34f043004c2f3ff04200472f3ef04100442f3cff3ff0452f3df04100492f3dff3ef04
72f3bf04200492f3cf04000472f39f04300472f3cf04100452f39f043004c2f3ef93400040a191b17140005081b191514040003090f00140003080b0a0400030
b010a04000401121c0204000309011b040003020d0404000505071607080400030c021d0400030013141400040e031f070400040406130104000306071814000
30506171400040d26252f240003051a1614000308171b1400030022212400030224232400030f13242400030d12232400030f14202400040b011201040003082
926240003092f25240004040d0e06040003092526240004092a2c2b2400030d27262400030102040400030406081400050b2c2e2d2f240003070908040003090
70f04000308090b040003011014140003090011140003020c0d04000307060e040003031214140003011412140003001f0314000304051614000305030614000
305191a140003061a171400030024222400030f1e132400030d1c122400030c11222400030e1d132400040e0d0213140003072826240003082a29240003092b2
f2400030d2e27293e8a8b96869a6695896887826367857a6d796b70806160868e948b8c6d859d877465978794668d899298808b70ad9b7c8267797c9e868f677
6646a8c8a9a8070758c988d71656e7f65778d95619b70868f996b76967e99799f69816786808d93719c886a9a817c9480708a716086726082806a60879e98888
48597936083759879616b768d858d92608673877e9664717d9d86886f75936c7d8b8b8c918e8d948d6a9e6b889a62917a9e6c741f39f0402f3cff3df0442f38f
f35f0443f36ff37f04000410f3bf040004a0f3af04f00410045004000460045004f0041004a00400f39ff3bf0400f35ff3df0490f37ff38f04a2f3bff3ff0482
f3cf04100482f39ff3af0482f37ff3df04f3f30f041004c3f32ff3cf04a00480f39f048104a0041004310480e040003020103040003020103040003090b0a040
0060b0f001c040a04000600111d08060c04000402131417040003060804140005040c060215040007090704180d011e040003060312140003070502140003060
413140004090e0f0b0400040f0e01101e0c8b8c9475746887826460807d7a8e948c70a08c907666829d968b8167748d858d99869b658180668672640d1a1e061
10200401040320b00420f3ff04d004f00420042004800400f3ee049004f0f3fff38f0410f33ff3bf04a0f31ff33f04000460f39f04c00440043004b004e004e0
0480043004700480f3ee01400030a040b0400030806040400030205010400030801070400030508070400030306050400040a02010904000309040a0400030b0
406040003090804040003070105040003020305040003080901040003050608040003030b060400040b03020a001a91987a7f9d74806c727a8b936d8a767b726
__map__
967c9791988c839d747e9f887f607e8060836a819761897c787e619e83760a40023fff400d400e3fff4002400840003fee3ff740013ff33ffb400a3ff13ff3400040063ff7400c40084003400b400e400e40084003400740083fee070400040504030a0400050102030406040004090201080400040a03020904000407060405
040004010607080400050a0908070507777d617f607e967c979e8377628a7a71809c85a07e081b0c17181f1d101001024010405002643ffa40593fcf4010406e3feb401e406c3fe4400a40553fc73ffc40623fd14003406e3fdd400e405c3fc74019406a3fd13ffe404c3fcb401b406c3ff04004405f3fc9400d406f3fd5400b
40723fe5401c406f3fdc401540733fe34005406f3fdf402740583fcb401c406d3fe64027406b3fef403640543fd4402740613fce402140693fd74039405b3fd6403440693fe5402e404b3fcb401c406c3ff2402c406c3fdc4030405e3fd2401d40703fe0402c40703feb402240733fe94037405d3fda404540593ffb4023406d
3fed401d406d3ff8403d405d400a4044405f3ff74035406b3fed402140733fff403d4064400a4043405140074018406b3ff1404240634001403140703ff9402840723fed402240753ff4403a4066400840254051401b4022406c3ffb4013406a3ffa40144051401c4026405a401940274069400940124059401d400f4068400b
401d4046401d401a406b3ff2401b406b400d401c405a401b4024407040004011406f4001401b40723ffc4012405c401940274066400b3ff5405940064017406c3ffa4014406b3feb3ff040593ff53ff840614006400a406c40033fef40613ff34003406c3fec3fef404e3fff401e406a3ff04005406f3ff83ff440623ffd4014
40713ffd400f40703feb401640723ff33ff340633ff23fff40003ff54019406c3ff03ff540003ffb3ff5400040064019406c3ff53fff4000400c400940004006400940003ffb401e406d3ff34001401a3ff7401a40503fee4015404f3ff13ff940173ffc4016404f3ff53ff940164004401a40523ff84001401a400740204056
3ff34009402040014008401c3ffb620300030f020a030003010b090300030c0506030003040b070300030f030e0300030c0e080300030c0d0f0300030f0d0203000301050b0300030c0b0503000304090b0300030f0a030300030c0f0e0300030c100d030004070b0c08030004201c1b180300031f121a030003111c19030003
1b1516030003141c170300031f131e0300031b1e180300031b1d1f0300031f1d1203000311151c0300031b1c1503000314191c0300031f1a130300031b1f1e0300031b161d0300032e222a030003212b29030003242b280300032c2f2b0300032c2d2e0300032c272e0300032e27230300032e2d2203000321252b030004262c
2b2503000324292b0300032e2a230300032c262d0300032f272c0300033e3139030003303b38030003333b38030003333b360300033e323d0300033a3f3b0300033a3d370300033a3c3e0300033a34400300033e3c3103000330343b0300033e39320300033a373f0300033a3e3d0300033a353c0300033a3b340300034f424a
030003414c490300034b4546030003444c470300034f434e0300034b504c0300034b4e480300034b4d4f0300034f4d4203000341454c0300034b4c4503000344494c0300034f4a430300034b48500300034b4f4e0300034b464d0400035b525c040003525e5c04000355605e04000355626004000362525b0400036362640400
03615f5e0400035d5e5f04000352555e0400035559620400036259520400035e60610400035d5c5e0400045a5b5c5d040004616357560400046062636104000464625b5a0400045f615654040004515a5d5304000463645857040004645a5158040004535d5f5462826472937c998e6890867d9f6c687a79648f8461877f6470
9478978c6a948a7f9e6b687e7b638b876287806d9a6a6e8f96697e70789a7c6895727e9d806b686f66877a628a976c7772749a726d956c79987a696a7663887e66938c6d97627b776383726f6679766282889f8665908092709561787b6b688368786d976d757264868a9c8c70698f7c7e607f82a07b84618f6b93816b688966
707e6274766a6c746c967a7b6192698d89696c8363747766707c6b68696d759d77758d66739d7e736d709493667d8d638785617d64717a9b74739167779e777a736d969165858661818863746f816560848370829c9482999182659e7585718e99638f816084818f819c8e81636b8e94648f8470836490849b957d9894746a72
869c708465a0817f9081646085801e401440673fec401d406c3fe23ffa405a3fce4006406c3fdf4008404d3fd4401c406d3fe5402440683fee4027405b3fcb4036405a3fdd402e404b3fcb4027406f3fec401d40693ff3402140743fff403840644008403640513ffb401e40683ff74013406a3ffc4011405940174020404740
134026406640094016406f3ffc401540673fed3ff540603ff13ff9404d3fff400540003ff73ff440004000400140004009401f406d3fee4017406d3ff2401d406d3ff60f0300030401020300040402050303000308090a0300030906070300030908060300030d0b0c0300031411120300031410110300031412130300031517
180300031516170300040e0f0b0d0400041a191c1d0400041b1a1d1e0400041b191c1e0f82637276749c6876936e668171668b946a8d85656f7a617f717a648f716888648e666f897181646f899a61877a0522130c1710010240204080021d40103ff03ff03ff23ff03ff03ff23ff0400b40103ff0400b400e40003ff63ff440
003ff63ff43ffd4007400e3ffd400740053ffd3ffa3ffd3ffd3ffa3ff93ffc400440093ffc4004400540113fff3ffd40113fff3ffa400e40074008400e40074004401c40063ffe401c40063ffc4018400c40064018400c40014021401540103ff03ff640103ff04005400f3ff93ffa400f3ff740033ff23ff03ff73ff23ff040
053ff33ff83ffa3ff33ff7400319070004050807060700040105060207000407031b1d0700040307080407000405011618070004100f13140700040a090d0e0700040c0b0f10070004090c100d0700040b0a0e0f0700031312150700040d1014110700040f0e12130700040e0d11120700031211150700031413150700031114
150d0004181617190700040805181907000404081917070004010417160d00041a1c1d1b07000402061c1a07000403021a1b07000406071d1c1980a085808c6260848080899fa0848080739d808861807a9f9e83776283776490819e8779628779809165809e76806a979c9081a08480a08481a0848080808060848060848080
a0806084810f40103ff03ff03ff23ff03ff03ff23ff0400b40103ff0400b400e40003ff63ff440003ff63ff43ffd4007400e3ffd400740013ffd3ffa3ff93ffc400440093ffc4004400140113fff3ffa400e40074008400e40074001402140150b07000405080706070004010506020700040206070307000403070804070004
050104080700040b0a0d0e070004090b0e0c0700040a090c0d0700030d0c0f0700030e0d0f0700030c0e0f0b80a085808c6260848080899fa08480807a9f9a856e66856e689173806e9a989173000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
